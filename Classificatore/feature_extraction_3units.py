# -*- coding: utf-8 -*-
"""feature extraction.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LE2wSn_NGD_PuQztR79fB3hd7Fi4C50t
"""

import pandas as pd
import scipy as sp
import numpy as np
import matplotlib.pyplot as plt
from scipy import signal
import scipy
from scipy import stats

from sklearn.preprocessing import Normalizer
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from scipy import fftpack

from google.colab import files
uploaded = files.upload()

file = open('tot_complete.csv')
lines = file.readlines()

processedList = []

for i, line in enumerate(lines):
    try:
        line = line.split(',')
        last = line[13].split(';')[0]
        last = last.strip()
        if last == '':
            break;
        temp = [line[0], line[1], line[2], line[3], line[4], line[5], line[6], line[7], line[8], line[9], line[10], line[11], line[12], last]
        processedList.append(temp)
    except:
        print('Error at line number: ', i)



processedList[5]

columns = ['quat1t', 'quat2t', 'quat3t', 'quat4t', 'quat1a', 'quat2a', 'quat3a', 'quat4a', 'quat1r', 'quat2r', 'quat3r', 'quat4r', 'user', 'activity']
dataset = pd.DataFrame(data = processedList, columns = columns)

dataset["activity"] = dataset["activity"].astype("|S")

from sklearn.preprocessing import LabelEncoder
label_encoder = LabelEncoder()
dataset["activitynum"] = label_encoder.fit_transform(dataset["activity"])

#replace_map = {'activity': {'cyclette': 0, 'lying_left': 1, 'lying_right': 2, 'prone': 3, 'running': 4, 'sitting': 5,
#       'stairs': 6, 'standing': 7, 'supine': 8,
#       'walking': 9}}
#df = dataset.copy()
#df.replace(replace_map, inplace=True)
#print(dataset_replace)

dataset.drop(['user'], axis=1)

dataset['quat1t'] = pd.to_numeric(dataset['quat1t'],errors='coerce')
dataset['quat2t'] = pd.to_numeric(dataset['quat2t'],errors='coerce')
dataset['quat3t'] = pd.to_numeric(dataset['quat3t'],errors='coerce')
dataset['quat4t'] = pd.to_numeric(dataset['quat4t'],errors='coerce')
dataset['quat1a'] = pd.to_numeric(dataset['quat1a'],errors='coerce')
dataset['quat2a'] = pd.to_numeric(dataset['quat2a'],errors='coerce')
dataset['quat3a'] = pd.to_numeric(dataset['quat3a'],errors='coerce')
dataset['quat4a'] = pd.to_numeric(dataset['quat4a'],errors='coerce')
dataset['quat1r'] = pd.to_numeric(dataset['quat1r'],errors='coerce')
dataset['quat2r'] = pd.to_numeric(dataset['quat2r'],errors='coerce')
dataset['quat3r'] = pd.to_numeric(dataset['quat3r'],errors='coerce')
dataset['quat4r'] = pd.to_numeric(dataset['quat4r'],errors='coerce')

y = dataset['activitynum']
X = dataset[['quat1t', 'quat2t', 'quat3t', 'quat4t', 'quat1a', 'quat2a', 'quat3a', 'quat4a', 'quat1r', 'quat2r', 'quat3r', 'quat4r']]
#standardization
scaler = StandardScaler()
X = scaler.fit_transform(X)
dataset = pd.DataFrame(data = X, columns = ['quat1t', 'quat2t', 'quat3t', 'quat4t', 'quat1a', 'quat2a', 'quat3a', 'quat4a', 'quat1r', 'quat2r', 'quat3r', 'quat4r'])
dataset['activitynum'] = y.values
#segmentation
N_TIME_STEPS = 200
N_FEATURES = 4
step = 20 
segments = []
labels = []
for i in range(0, len(dataset) - N_TIME_STEPS, step):
    quat1t = dataset['quat1t'].values[i: i + N_TIME_STEPS]
    quat2t = dataset['quat3t'].values[i: i + N_TIME_STEPS]
    quat3t = dataset['quat2t'].values[i: i + N_TIME_STEPS]
    quat4t = dataset['quat4t'].values[i: i + N_TIME_STEPS]
    quat1a = dataset['quat1a'].values[i: i + N_TIME_STEPS]
    quat2a = dataset['quat3a'].values[i: i + N_TIME_STEPS]
    quat3a = dataset['quat2a'].values[i: i + N_TIME_STEPS]
    quat4a = dataset['quat4a'].values[i: i + N_TIME_STEPS]
    quat1r = dataset['quat1r'].values[i: i + N_TIME_STEPS]
    quat2r = dataset['quat3r'].values[i: i + N_TIME_STEPS]
    quat3r = dataset['quat2r'].values[i: i + N_TIME_STEPS]
    quat4r = dataset['quat4r'].values[i: i + N_TIME_STEPS]
    labels = stats.mode(dataset['activitynum'][i: i + N_TIME_STEPS])[0][0]
    segments.append([quat1t, quat2t, quat3t, quat4t, quat1a, quat2a, quat3a, quat4a, quat1r, quat2r, quat3r, quat4r, labels])

columns=['quat1t', 'quat2t', 'quat3t', 'quat4t', 'quat1a', 'quat2a', 'quat3a', 'quat4a', 'quat1r', 'quat2r', 'quat3r', 'quat4r', 'activity']

"""Time features"""
#calcolo di media, std, var, skew, rms e kur per ogni segmento per tutti gli attributi
mean_quat=[]
std_quat=[]
variance_quat = []
skew_quat = []
rms_quat = []
kur_quat = []

for segment in segments:
    mean_quat0 = segment[0].mean()
    mean_quat1 = segment[1].mean()
    mean_quat2 = segment[2].mean()
    mean_quat3 = segment[3].mean()
    mean_quat4 = segment[4].mean()
    mean_quat5 = segment[5].mean()
    mean_quat6 = segment[6].mean()
    mean_quat7 = segment[7].mean()
    mean_quat8 = segment[8].mean()
    mean_quat9 = segment[9].mean()
    mean_quat10 = segment[10].mean()
    mean_quat11 = segment[11].mean()
    std_quat0 = segment[0].std()
    std_quat1 = segment[1].std()
    std_quat2 = segment[2].std()
    std_quat3 = segment[3].std()
    std_quat4 = segment[4].std()
    std_quat5 = segment[5].std()
    std_quat6 = segment[6].std()
    std_quat7 = segment[7].std()
    std_quat8 = segment[8].std()
    std_quat9 = segment[9].std()
    std_quat10 = segment[10].std()
    std_quat11 = segment[11].std()
    rms_quat0 = np.sqrt(sum(np.square(segment[0])))
    rms_quat1 = np.sqrt(sum(np.square(segment[1])))
    rms_quat2 = np.sqrt(sum(np.square(segment[2])))
    rms_quat3 = np.sqrt(sum(np.square(segment[3])))
    rms_quat4 = np.sqrt(sum(np.square(segment[4])))
    rms_quat5 = np.sqrt(sum(np.square(segment[5])))
    rms_quat6 = np.sqrt(sum(np.square(segment[6])))
    rms_quat7 = np.sqrt(sum(np.square(segment[7])))
    rms_quat8 = np.sqrt(sum(np.square(segment[8])))
    rms_quat9 = np.sqrt(sum(np.square(segment[9])))
    rms_quat10 = np.sqrt(sum(np.square(segment[10])))
    rms_quat11 = np.sqrt(sum(np.square(segment[11])))
    kur_quat0 = scipy.stats.kurtosis(segment[0])
    kur_quat1 = scipy.stats.kurtosis(segment[1])
    kur_quat2 = scipy.stats.kurtosis(segment[2])
    kur_quat3 = scipy.stats.kurtosis(segment[3])
    kur_quat4 = scipy.stats.kurtosis(segment[4])
    kur_quat5 = scipy.stats.kurtosis(segment[5])
    kur_quat6 = scipy.stats.kurtosis(segment[6])
    kur_quat7 = scipy.stats.kurtosis(segment[7]) 
    kur_quat8 = scipy.stats.kurtosis(segment[8])
    kur_quat9 = scipy.stats.kurtosis(segment[9])
    kur_quat10 = scipy.stats.kurtosis(segment[10])
    kur_quat11 = scipy.stats.kurtosis(segment[11])
    skew_quat0 = scipy.stats.skew(segment[0])
    skew_quat1 = scipy.stats.skew(segment[1])
    skew_quat2 = scipy.stats.skew(segment[2])
    skew_quat3 = scipy.stats.skew(segment[3])
    skew_quat4 = scipy.stats.skew(segment[4])
    skew_quat5 = scipy.stats.skew(segment[5])
    skew_quat6 = scipy.stats.skew(segment[6])
    skew_quat7 = scipy.stats.skew(segment[7])
    skew_quat8 = scipy.stats.skew(segment[8])
    skew_quat9 = scipy.stats.skew(segment[9])
    skew_quat10 = scipy.stats.skew(segment[10])
    skew_quat11 = scipy.stats.skew(segment[11])    
   
  
    mean_quat.append([mean_quat0, mean_quat1, mean_quat2, mean_quat3, mean_quat4, mean_quat5, mean_quat6, mean_quat7, mean_quat8, mean_quat9, mean_quat10, mean_quat11])
    std_quat.append([std_quat0, std_quat1, std_quat2, std_quat3, std_quat4, std_quat5, std_quat6, std_quat7, std_quat8, std_quat9, std_quat10, std_quat11])
    skew_quat.append([skew_quat0, skew_quat1, skew_quat2, skew_quat3, skew_quat4, skew_quat5, skew_quat6, skew_quat7, skew_quat8, skew_quat9, skew_quat10, skew_quat11])
    rms_quat.append([rms_quat0, rms_quat1, rms_quat2, rms_quat3, rms_quat4, rms_quat5, rms_quat6, rms_quat7, rms_quat8, rms_quat9, rms_quat10, rms_quat11])
    kur_quat.append([kur_quat0, kur_quat1, kur_quat2, kur_quat3, kur_quat4, kur_quat5, kur_quat6, kur_quat7, kur_quat8, kur_quat9, kur_quat10, kur_quat11])

first_dataframe = pd.DataFrame(np.column_stack([mean_quat, std_quat]), columns=['mean_quat0', 'mean_quat1','mean_quat2', 'mean_quat3','mean_quat4', 'mean_quat5', 'mean_quat6', 'mean_quat7', 'mean_quat8', 'mean_quat9', 'mean_quat10', 'mean_quat11', 'std_quat0', 'std_quat1', 'std_quat2', 'std_quat3', 'std_quat4', 'std_quat5', 'std_quat6', 'std_quat7', 'std_quat8', 'std_quat9', 'std_quat10', 'std_quat11'])
second_dataframe = pd.DataFrame(np.column_stack([skew_quat]), columns=['skew_quat0', 'skew_quat1', 'skew_quat2', 'skew_quat3', 'skew_quat4', 
                                                                        'skew_quat5', 'skew_quat6', 'skew_quat7', 'skew_quat8', 'skew_quat9', 
                                                                        'skew_quat10', 'skew_quat11'])
third_dataframe = pd.DataFrame(np.column_stack([rms_quat,kur_quat]),columns=['rms_quat0', 'rms_quat1', 'rms_quat2', 'rms_quat3', 'rms_quat4', 'rms_quat5', 'rms_quat6', 'rms_quat7', 'rms_quat8', 'rms_quat9', 'rms_quat10', 'rms_quat11','kur_quat0', 'kur_quat1', 'kur_quat2', 'kur_quat3', 'kur_quat4', 'kur_quat5', 'kur_quat6', 'kur_quat7', 'kur_quat8', 'kur_quat9', 'kur_quat10', 'kur_quat11'])

#calcolo di ptp, iqr, mediana, crestf per ogni segmento per tutti gli attributi
ptp_quat = []
iqr_quat = []
median_quat = []
crestf_quat = []
activities = []

for segment in segments: 
    iqr_quat0 = scipy.stats.iqr(segment[0])
    iqr_quat1 = scipy.stats.iqr(segment[1])
    iqr_quat2 = scipy.stats.iqr(segment[2])
    iqr_quat3 = scipy.stats.iqr(segment[3])
    iqr_quat4 = scipy.stats.iqr(segment[4])
    iqr_quat5 = scipy.stats.iqr(segment[5])
    iqr_quat6 = scipy.stats.iqr(segment[6])
    iqr_quat7 = scipy.stats.iqr(segment[7])
    iqr_quat8 = scipy.stats.iqr(segment[8])
    iqr_quat9 = scipy.stats.iqr(segment[9])
    iqr_quat10 = scipy.stats.iqr(segment[10])
    iqr_quat11 = scipy.stats.iqr(segment[11])
    median_quat0 = np.median(segment[0])
    median_quat1 = np.median(segment[1])
    median_quat2 = np.median(segment[2])
    median_quat3 = np.median(segment[3])
    median_quat4 = np.median(segment[4])
    median_quat5 = np.median(segment[5])
    median_quat6 = np.median(segment[6])
    median_quat7 = np.median(segment[7])
    median_quat8 = np.median(segment[8])
    median_quat9 = np.median(segment[9])
    median_quat10 = np.median(segment[10])
    median_quat11 = np.median(segment[11])
    crestf_quat0 = segment[0].max(0)/np.sqrt(sum(np.square(segment[0])))
    crestf_quat1 = segment[1].max(0)/np.sqrt(sum(np.square(segment[1])))
    crestf_quat2 = segment[2].max(0)/np.sqrt(sum(np.square(segment[2])))
    crestf_quat3 = segment[3].max(0)/np.sqrt(sum(np.square(segment[3]))) 
    crestf_quat4 = segment[4].max(0)/np.sqrt(sum(np.square(segment[4])))
    crestf_quat5 = segment[5].max(0)/np.sqrt(sum(np.square(segment[5])))
    crestf_quat6 = segment[6].max(0)/np.sqrt(sum(np.square(segment[6])))
    crestf_quat7 = segment[7].max(0)/np.sqrt(sum(np.square(segment[7])))
    crestf_quat8 = segment[8].max(0)/np.sqrt(sum(np.square(segment[8])))
    crestf_quat9 = segment[9].max(0)/np.sqrt(sum(np.square(segment[9])))
    crestf_quat10 = segment[10].max(0)/np.sqrt(sum(np.square(segment[10])))
    crestf_quat11 = segment[11].max(0)/np.sqrt(sum(np.square(segment[11])))
    activity = segment[12]
    ptp_quat0 = segment[0].ptp()
    ptp_quat1 = segment[1].ptp()
    ptp_quat2 = segment[2].ptp()
    ptp_quat3 = segment[3].ptp()
    ptp_quat4 = segment[4].ptp()
    ptp_quat5 = segment[5].ptp()
    ptp_quat6 = segment[6].ptp()
    ptp_quat7 = segment[7].ptp()
    ptp_quat8 = segment[8].ptp()
    ptp_quat9 = segment[9].ptp()
    ptp_quat10 = segment[10].ptp()
    ptp_quat11 = segment[11].ptp()
    activity = segment[12]
    
    ptp_quat.append([ptp_quat0, ptp_quat1, ptp_quat2, ptp_quat3, ptp_quat4, ptp_quat5, ptp_quat6, ptp_quat7, ptp_quat8, ptp_quat9, ptp_quat10, ptp_quat11])
    iqr_quat.append([iqr_quat0, iqr_quat1, iqr_quat2, iqr_quat3, iqr_quat4, iqr_quat5, iqr_quat6, iqr_quat7, iqr_quat8, iqr_quat9, iqr_quat10, iqr_quat11])
    median_quat.append([median_quat0, median_quat1, median_quat2, median_quat3, median_quat4, median_quat5, median_quat6, median_quat7, median_quat8, median_quat9, median_quat10, median_quat11])
    crestf_quat.append([crestf_quat0, crestf_quat1, crestf_quat2, crestf_quat3, crestf_quat4, crestf_quat5, crestf_quat6, crestf_quat7, crestf_quat8, crestf_quat9, crestf_quat10, crestf_quat11])
    activities.append([activity])

fourth_dataframe = pd.DataFrame(np.column_stack([ptp_quat,iqr_quat]),columns=['ptp_quat0', 'ptp_quat1', 'ptp_quat2', 'ptp_quat3', 'ptp_quat4', 'ptp_quat5', 'ptp_quat6', 'ptp_quat7', 'ptp_quat8', 'ptp_quat9', 'ptp_quat10', 'ptp_quat11', 'iqr_quat0', 'iqr_quat1', 'iqr_quat2', 'iqr_quat3', 'iqr_quat4', 'iqr_quat5', 'iqr_quat6', 'iqr_quat7', 'iqr_quat8', 'iqr_quat9', 'iqr_quat10', 'iqr_quat11'])
fifth_dataframe = pd.DataFrame(np.column_stack([median_quat,crestf_quat]),columns=['median_quat0', 'median_quat1', 'median_quat2', 'median_quat3', 'median_quat4', 'median_quat5', 'median_quat6', 'median_quat7', 'median_quat8', 'median_quat9', 'median_quat10', 'median_quat11','crestf_quat0', 'crestf_quat1', 'crestf_quat2', 'crestf_quat3', 'crestf_quat4', 'crestf_quat5', 'crestf_quat6', 'crestf_quat7', 'crestf_quat8', 'crestf_quat9', 'crestf_quat10', 'crestf_quat11'])
last_dataframe = pd.DataFrame(activities, columns=['activity'])

time_features = pd.concat([first_dataframe, second_dataframe, third_dataframe,fourth_dataframe,fifth_dataframe, last_dataframe], axis=1)


"""Frequency features"""

fft_mean = []
fft_std = []
fft_skew = []
fft_max = []
fft_min = []
psd_mean = []
psd_max = []
psd_2max = []
entropy = []
energy = []
activities = []
n = 200

for segment in segments:
  fft_quat1 = scipy.fftpack.rfft(segment[0])
  fft_quat2 = scipy.fftpack.rfft(segment[1])
  fft_quat3 = scipy.fftpack.rfft(segment[2])
  fft_quat4 = scipy.fftpack.rfft(segment[3])
  fftmean_quat1 = fft_quat1.mean(axis = 0)
  fftmean_quat2 = fft_quat2.mean(axis = 0)
  fftmean_quat3 = fft_quat3.mean(axis= 0)
  fftmean_quat4 = fft_quat4.mean(axis = 0)
  fftstd_quat1 = fft_quat1.std(axis = 0)
  fftstd_quat2 = fft_quat2.std(axis = 0)
  fftstd_quat3 = fft_quat3.std(axis = 0)
  fftstd_quat4 = fft_quat4.std(axis = 0)
  fftskew_quat1 = scipy.stats.skew(fft_quat1, axis = 0)
  fftskew_quat2 = scipy.stats.skew(fft_quat2, axis = 0)
  fftskew_quat3 = scipy.stats.skew(fft_quat3, axis = 0)
  fftskew_quat4 = scipy.stats.skew(fft_quat4, axis = 0)
  fftmax_quat1 = fft_quat1.max(axis = 0)
  fftmax_quat2 = fft_quat2.max(axis = 0)
  fftmax_quat3 = fft_quat3.max(axis = 0)
  fftmax_quat4 = fft_quat4.max(axis = 0)
  fftmin_quat1 = fft_quat1.min(axis = 0)
  fftmin_quat2 = fft_quat2.min(axis = 0)
  fftmin_quat3 = fft_quat3.min(axis = 0)
  fftmin_quat4 = fft_quat4.min(axis = 0)
  psd_quat1 = (fft_quat1*fft_quat1)/(n*n)
  psd_quat2 = (fft_quat2*fft_quat2)/(n*n)
  psd_quat3 = (fft_quat3*fft_quat3)/(n*n)
  psd_quat4 = (fft_quat4*fft_quat4)/(n*n)
  psdmean_quat1 = psd_quat1.mean(axis=0)
  psdmean_quat2 = psd_quat2.mean(axis=0)
  psdmean_quat3 = psd_quat3.mean(axis=0)
  psdmean_quat4 = psd_quat4.mean(axis=0)
  psdmax_quat1 = psd_quat1.max(axis=0)
  psdmax_quat2 = psd_quat2.max(axis=0)
  psdmax_quat3 = psd_quat3.max(axis=0)
  psdmax_quat4 = psd_quat4.max(axis=0)
#  entropy_quat1 = scipy.stats.entropy(segment[0])
#  entropy_quat2 = scipy.stats.entropy(segment[1])
#  entropy_quat3 = scipy.stats.entropy(segment[2])
#  entropy_quat4 = scipy.stats.entropy(segment[3])
  activity = segment[4]

  fft_mean.append([fftmean_quat1, fftmean_quat2, fftmean_quat3,fftmean_quat4])
  fft_std.append([fftstd_quat1,fftstd_quat2,fftstd_quat3,fftstd_quat4])
  fft_skew.append([fftskew_quat1, fftskew_quat2,fftskew_quat3,fftskew_quat4])
  fft_max.append([fftmax_quat1, fftmax_quat2, fftmax_quat3, fftmax_quat4])
  fft_min.append([fftmin_quat1,fftmin_quat2, fftmin_quat3, fftmin_quat4])
  psd_max.append([psdmax_quat1, psdmax_quat2, psdmax_quat3, psdmax_quat4])
  psd_mean.append([psdmean_quat1,psdmean_quat1,psdmean_quat3,psdmean_quat4])
#  entropy.append([entropy_quat1,entropy_quat2,entropy_quat3,entropy_quat4])
  activities.append([activity])

first_dataframe = pd.DataFrame(np.column_stack([fft_mean, fft_std]), columns=['fftmean_quat1','fftmean_quat2','fftmean_quat3','fftmean_quat4','fftstd_quat1','fftstd_quat2','fftstd_quat3','fftstd_quat4'])
second_dataframe = pd.DataFrame(np.column_stack([fft_skew, fft_max]), columns=['fftskew_quat1','fftskew_quat2','fftskew_quat3','fftskew_quat4', 'fftmax_quat1','fftmax_quat2','fftmax_quat3', 'fftmax_quat4'])
third_dataframe = pd.DataFrame(np.column_stack([fft_min, psd_max]), columns=['fftmin_quat1','fftmin_quat2','fftmin_quat3','fftmin_quat4', 'psdmax_quat1','psdmax_quat2','psdmax_quat3', 'psdmax_quat4'])
fourth_dataframe = pd.DataFrame(np.column_stack([psd_mean]), columns=['psdmean_quat1','psdmean_quat2','psdmean_quat3','psdmean_quat4'])
last_dataframe = pd.DataFrame(activities, columns=['activity'])

frequency_features = pd.concat([first_dataframe, second_dataframe,third_dataframe,fourth_dataframe,last_dataframe], axis=1)

features_tot = pd.concat([time_features, frequency_features], axis=1)

#features_tot = features_tot.dropna()

features_tot.to_csv('feature_tot.csv',index=False)

